

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Thu Nov 02 16:59:26 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    10                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    11                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    12  0000                     
    13                           ; Version 1.43
    14                           ; Generated 25/07/2017 GMT
    15                           ; 
    16                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC18F4520 Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     
    48                           ; #config settings
    49                           
    50                           	psect	cinit
    51  007F92                     __pcinit:
    52                           	opt stack 0
    53  007F92                     start_initialization:
    54                           	opt stack 0
    55  007F92                     __initialization:
    56                           	opt stack 0
    57  007F92                     end_of_initialization:
    58                           	opt stack 0
    59  007F92                     __end_of__initialization:
    60                           	opt stack 0
    61  007F92  0100               	movlb	0
    62  007F94  EFE2  F03F         	goto	_main	;jump to C main() function
    63                           
    64                           	psect	cstackCOMRAM
    65  000001                     __pcstackCOMRAM:
    66                           	opt stack 0
    67  000001                     ?_add:
    68                           	opt stack 0
    69  000001                     ?_sub:
    70                           	opt stack 0
    71  000001                     add@a:
    72                           	opt stack 0
    73  000001                     sub@a:
    74                           	opt stack 0
    75                           
    76                           ; 2 bytes @ 0x0
    77  000001                     	ds	2
    78  000003                     add@b:
    79                           	opt stack 0
    80  000003                     sub@b:
    81                           	opt stack 0
    82                           
    83                           ; 2 bytes @ 0x2
    84  000003                     	ds	2
    85  000005                     ??_sub:
    86                           
    87                           ; 1 bytes @ 0x4
    88  000005                     	ds	2
    89  000007                     main@add_result:
    90                           	opt stack 0
    91                           
    92                           ; 2 bytes @ 0x6
    93  000007                     	ds	2
    94  000009                     main@sub_result:
    95                           	opt stack 0
    96                           
    97                           ; 2 bytes @ 0x8
    98  000009                     	ds	2
    99                           
   100 ;;
   101 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   102 ;;
   103 ;; *************** function _main *****************
   104 ;; Defined at:
   105 ;;		line 12 in file "newmain.c"
   106 ;; Parameters:    Size  Location     Type
   107 ;;		None
   108 ;; Auto vars:     Size  Location     Type
   109 ;;  sub_result      2    8[COMRAM] int 
   110 ;;  add_result      2    6[COMRAM] int 
   111 ;; Return value:  Size  Location     Type
   112 ;;                  1    wreg      void 
   113 ;; Registers used:
   114 ;;		wreg, status,2, status,0, cstack
   115 ;; Tracked objects:
   116 ;;		On entry : 0/0
   117 ;;		On exit  : 0/0
   118 ;;		Unchanged: 0/0
   119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   120 ;;      Params:         0       0       0       0       0       0       0
   121 ;;      Locals:         4       0       0       0       0       0       0
   122 ;;      Temps:          0       0       0       0       0       0       0
   123 ;;      Totals:         4       0       0       0       0       0       0
   124 ;;Total ram usage:        4 bytes
   125 ;; Hardware stack levels required when called:    1
   126 ;; This function calls:
   127 ;;		_add
   128 ;;		_sub
   129 ;; This function is called by:
   130 ;;		Startup code after reset
   131 ;; This function uses a non-reentrant model
   132 ;;
   133                           
   134                           	psect	text0
   135  007FC4                     __ptext0:
   136                           	opt stack 0
   137  007FC4                     _main:
   138                           	opt stack 30
   139                           
   140                           ;newmain.c: 13: int add_result = add(7, 27);
   141                           
   142                           ;incstack = 0
   143  007FC4  0E00               	movlw	0
   144  007FC6  6E02               	movwf	add@a+1,c
   145  007FC8  0E07               	movlw	7
   146  007FCA  6E01               	movwf	add@a,c
   147  007FCC  0E00               	movlw	0
   148  007FCE  6E04               	movwf	add@b+1,c
   149  007FD0  0E1B               	movlw	27
   150  007FD2  6E03               	movwf	add@b,c
   151  007FD4  ECCC  F03F         	call	_add	;wreg free
   152  007FD8  C001  F007         	movff	?_add,main@add_result
   153  007FDC  C002  F008         	movff	?_add+1,main@add_result+1
   154                           
   155                           ;newmain.c: 14: int sub_result = sub(8, 2);
   156  007FE0  0E00               	movlw	0
   157  007FE2  6E02               	movwf	sub@a+1,c
   158  007FE4  0E08               	movlw	8
   159  007FE6  6E01               	movwf	sub@a,c
   160  007FE8  0E00               	movlw	0
   161  007FEA  6E04               	movwf	sub@b+1,c
   162  007FEC  0E02               	movlw	2
   163  007FEE  6E03               	movwf	sub@b,c
   164  007FF0  ECD3  F03F         	call	_sub	;wreg free
   165  007FF4  C001  F009         	movff	?_sub,main@sub_result
   166  007FF8  C002  F00A         	movff	?_sub+1,main@sub_result+1
   167                           
   168                           ;newmain.c: 16: return;
   169  007FFC  EF00  F000         	goto	start
   170  008000                     __end_of_main:
   171                           	opt stack 0
   172                           
   173 ;; *************** function _sub *****************
   174 ;; Defined at:
   175 ;;		line 11 in file "sub.c"
   176 ;; Parameters:    Size  Location     Type
   177 ;;  a               2    0[COMRAM] int 
   178 ;;  b               2    2[COMRAM] int 
   179 ;; Auto vars:     Size  Location     Type
   180 ;;		None
   181 ;; Return value:  Size  Location     Type
   182 ;;                  2    0[COMRAM] int 
   183 ;; Registers used:
   184 ;;		wreg, status,2, status,0
   185 ;; Tracked objects:
   186 ;;		On entry : 0/0
   187 ;;		On exit  : 0/0
   188 ;;		Unchanged: 0/0
   189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   190 ;;      Params:         4       0       0       0       0       0       0
   191 ;;      Locals:         0       0       0       0       0       0       0
   192 ;;      Temps:          2       0       0       0       0       0       0
   193 ;;      Totals:         6       0       0       0       0       0       0
   194 ;;Total ram usage:        6 bytes
   195 ;; Hardware stack levels used:    1
   196 ;; This function calls:
   197 ;;		Nothing
   198 ;; This function is called by:
   199 ;;		_main
   200 ;; This function uses a non-reentrant model
   201 ;;
   202                           
   203                           	psect	text1
   204  007FA6                     __ptext1:
   205                           	opt stack 0
   206  007FA6                     _sub:
   207                           	opt stack 30
   208                           
   209                           ;sub.c: 12: return a - b;
   210                           
   211                           ;incstack = 0
   212  007FA6  C003  F005         	movff	sub@b,??_sub
   213  007FAA  C004  F006         	movff	sub@b+1,??_sub+1
   214  007FAE  1E05               	comf	??_sub,f,c
   215  007FB0  1E06               	comf	??_sub+1,f,c
   216  007FB2  4A05               	infsnz	??_sub,f,c
   217  007FB4  2A06               	incf	??_sub+1,f,c
   218  007FB6  5001               	movf	sub@a,w,c
   219  007FB8  2405               	addwf	??_sub,w,c
   220  007FBA  6E01               	movwf	?_sub,c
   221  007FBC  5002               	movf	sub@a+1,w,c
   222  007FBE  2006               	addwfc	??_sub+1,w,c
   223  007FC0  6E02               	movwf	?_sub+1,c
   224  007FC2  0012               	return	
   225  007FC4                     __end_of_sub:
   226                           	opt stack 0
   227                           
   228 ;; *************** function _add *****************
   229 ;; Defined at:
   230 ;;		line 11 in file "add.c"
   231 ;; Parameters:    Size  Location     Type
   232 ;;  a               2    0[COMRAM] int 
   233 ;;  b               2    2[COMRAM] int 
   234 ;; Auto vars:     Size  Location     Type
   235 ;;		None
   236 ;; Return value:  Size  Location     Type
   237 ;;                  2    0[COMRAM] int 
   238 ;; Registers used:
   239 ;;		wreg, status,2, status,0
   240 ;; Tracked objects:
   241 ;;		On entry : 0/0
   242 ;;		On exit  : 0/0
   243 ;;		Unchanged: 0/0
   244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   245 ;;      Params:         4       0       0       0       0       0       0
   246 ;;      Locals:         0       0       0       0       0       0       0
   247 ;;      Temps:          0       0       0       0       0       0       0
   248 ;;      Totals:         4       0       0       0       0       0       0
   249 ;;Total ram usage:        4 bytes
   250 ;; Hardware stack levels used:    1
   251 ;; This function calls:
   252 ;;		Nothing
   253 ;; This function is called by:
   254 ;;		_main
   255 ;; This function uses a non-reentrant model
   256 ;;
   257                           
   258                           	psect	text2
   259  007F98                     __ptext2:
   260                           	opt stack 0
   261  007F98                     _add:
   262                           	opt stack 30
   263                           
   264                           ;add.c: 12: return a + b;
   265                           
   266                           ;incstack = 0
   267  007F98  5003               	movf	add@b,w,c
   268  007F9A  2401               	addwf	add@a,w,c
   269  007F9C  6E01               	movwf	?_add,c
   270  007F9E  5004               	movf	add@b+1,w,c
   271  007FA0  2002               	addwfc	add@a+1,w,c
   272  007FA2  6E02               	movwf	?_add+1,c
   273  007FA4  0012               	return	
   274  007FA6                     __end_of_add:
   275                           	opt stack 0
   276  0000                     
   277                           	psect	rparam


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     10      10
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_sub

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     394
                                              6 COMRAM     4     4      0
                                _add
                                _sub
 ---------------------------------------------------------------------------------
 (1) _sub                                                  6     2      4     196
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _add                                                  4     0      4     196
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _add
   _sub

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      A       A       1        7.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Thu Nov 02 16:59:26 2017

                    _add 7F98                      _sub 7FA6                     ?_add 0001  
                   ?_sub 0001                     add@a 0001                     add@b 0003  
                   _main 7FC4                     sub@a 0001                     sub@b 0003  
                   start 0000             ___param_bank 000000                    ??_add 0005  
                  ??_sub 0005                    ?_main 0001          __initialization 7F92  
           __end_of_main 8000                   ??_main 0007            __activetblptr 000000  
         main@add_result 0007               __accesstop 0080  __end_of__initialization 7F92  
          ___rparam_used 000001           __pcstackCOMRAM 0001                  __Hparam 0000  
                __Lparam 0000                  __pcinit 7F92                  __ramtop 0600  
                __ptext0 7FC4                  __ptext1 7FA6                  __ptext2 7F98  
           __size_of_add 000E             __size_of_sub 001E     end_of_initialization 7F92  
         main@sub_result 0009      start_initialization 7F92              __end_of_add 7FA6  
            __end_of_sub 7FC4                 __Hrparam 0000                 __Lrparam 0000  
          __size_of_main 003C  
